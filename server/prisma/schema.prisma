generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
  FREELANCER
}

enum OrderStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum DealState {
  CREATED
  STARTED
  SUBMITTED
  REVISION_REQUESTED
  ACCEPTED
  DISPUTED
  RESOLVED
  CANCELLED
}

enum FavoriteKind {
  ORDER
  TASK
  DEAL
}

enum DisputeState {
  OPEN
  IN_REVIEW
  RESOLVED
  CLOSED
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         UserRole @default(CLIENT)
  googleId     String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile              Profile?
  clientOrders         Order[]              @relation("ClientOrders")
  clientTasks          Task[]               @relation("ClientTasks")
  proposals            Proposal[]
  clientDeals          Deal[]               @relation("ClientDeals")
  freelancerDeals      Deal[]               @relation("FreelancerDeals")
  threadParticipants   ThreadParticipant[]
  sentMessages         Message[]
  reviewsGiven         Review[]             @relation("ReviewsGiven")
  reviewsReceived      Review[]             @relation("ReviewsReceived")
  favorites            Favorite[]
  walletBalances       WalletBalance[]
  notifications        Notification[]
  openedDisputes       Dispute[]            @relation("DisputeOpener")

  @@index([email])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  slug        String   @unique
  name        String
  bio         String?
  skills      String[]
  avatarUrl   String?
  location    String?
  ratingAvg   Float    @default(0)
  ratingCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([userId])
}

model Order {
  id          String      @id @default(cuid())
  clientId    String
  title       String
  description String
  budgetMin   Float?
  budgetMax   Float?
  currency    String      @default("USD")
  tags        String[]
  status      OrderStatus @default(OPEN)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  client    User       @relation("ClientOrders", fields: [clientId], references: [id], onDelete: Cascade)
  proposals Proposal[]
  deals     Deal[]

  @@index([clientId])
  @@index([status])
  @@index([createdAt])
}

model Task {
  id          String     @id @default(cuid())
  clientId    String
  title       String
  description String
  price       Float
  currency    String     @default("USD")
  tags        String[]
  status      TaskStatus @default(OPEN)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  client    User       @relation("ClientTasks", fields: [clientId], references: [id], onDelete: Cascade)
  proposals Proposal[]
  deals     Deal[]

  @@index([clientId])
  @@index([status])
  @@index([createdAt])
}

model Proposal {
  id           String         @id @default(cuid())
  orderId      String?
  taskId       String?
  freelancerId String
  price        Float
  days         Int
  message      String
  status       ProposalStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  order      Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  task       Task?  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  freelancer User   @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([taskId])
  @@index([freelancerId])
  @@index([status])
}

model Deal {
  id           String    @id @default(cuid())
  orderId      String?
  taskId       String?
  clientId     String
  freelancerId String
  amount       Float
  currency     String    @default("USD")
  state        DealState @default(CREATED)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  order      Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)
  task       Task?     @relation(fields: [taskId], references: [id], onDelete: SetNull)
  client     User      @relation("ClientDeals", fields: [clientId], references: [id], onDelete: Cascade)
  freelancer User      @relation("FreelancerDeals", fields: [freelancerId], references: [id], onDelete: Cascade)
  reviews    Review[]
  disputes   Dispute[]

  @@index([clientId])
  @@index([freelancerId])
  @@index([state])
  @@index([createdAt])
}

model Thread {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants ThreadParticipant[]
  messages     Message[]
}

model ThreadParticipant {
  id       String @id @default(cuid())
  threadId String
  userId   String

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([threadId, userId])
  @@index([threadId])
  @@index([userId])
}

model Message {
  id          String   @id @default(cuid())
  threadId    String
  senderId    String
  text        String
  attachments String[]
  createdAt   DateTime @default(now())

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([senderId])
  @@index([createdAt])
}

model Review {
  id         String   @id @default(cuid())
  dealId     String
  fromUserId String
  toUserId   String
  rating     Int
  text       String?
  createdAt  DateTime @default(now())

  deal     Deal @relation(fields: [dealId], references: [id], onDelete: Cascade)
  fromUser User @relation("ReviewsGiven", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User @relation("ReviewsReceived", fields: [toUserId], references: [id], onDelete: Cascade)

  @@unique([dealId, fromUserId])
  @@index([dealId])
  @@index([toUserId])
}

model Favorite {
  id        String       @id @default(cuid())
  userId    String
  kind      FavoriteKind
  refId     String
  createdAt DateTime     @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, kind, refId])
  @@index([userId])
  @@index([kind, refId])
}

model WalletBalance {
  id        String   @id @default(cuid())
  userId    String
  currency  String   @default("USD")
  available Float    @default(0)
  hold      Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, currency])
  @@index([userId])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  payload   Json
  readAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([readAt])
}

model Dispute {
  id         String       @id @default(cuid())
  dealId     String
  openedById String
  reason     String
  state      DisputeState @default(OPEN)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  deal      Deal @relation(fields: [dealId], references: [id], onDelete: Cascade)
  openedBy  User @relation("DisputeOpener", fields: [openedById], references: [id], onDelete: Cascade)

  @@index([dealId])
  @@index([openedById])
  @@index([state])
}
